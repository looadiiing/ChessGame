from graphics import *


############ DISCLAMER ############

# In this whole program :
#
# LEN        --> Length
# SQU        --> Case
# PIX_ABS        --> Abscissa
# PIX_ORD        --> Ordinate

# ABS    --> Abscissa of square
# ORD    --> Ordinate of square



from graphics import *


### constants ###




#info de grille
LEN_PANEL = 200
LEN_GRID = 600
NBR_SQU = 8
LEN_CASE = LEN_GRID // NBR_SQU
LEN_MID_CASE = LEN_CASE // 2
PANEL_COLOR1 = couleur(130,35,1) #brown
PANEL_COLOR2 = couleur(225,224,163) #beige
CONFIG_COLOR3 = couleur(37,39,114) #blue

RAY_PIECE = 25

NONE = 0
BLACK = 1
WHITE = 2
PAWN = 3
KNIGHT = 4
BISHOP = 5
ROOK = 6
QUEEN = 7
KING = 8





FIRST_PLAYER = WHITE

### I CLASS ###

class Game():


    __slots__ = (

        "grid",
        "activePlayer",
        "selectedSquare",
        "arrivalSquare",
        "piece"
    )


    def __init__(self):

        self.grid = [[NONE] * NBR_SQU for nbr_square in range(NBR_SQU)]
        self.activePlayer = FIRST_PLAYER
        self.selectedSquare = (None)
        self.arrivalSquare = (None)
        self.piece =Piece()


class Piece():


    __slots__= (

        "color",
        "type"
    )


    def __init__(self):

        self.color = [WHITE, BLACK]
        self.type = [PAWN, KNIGHT, BISHOP, ROOK, QUEEN, KING]




### II INITIALIZATION ###

def init_game ():
    G = Game()

    for line in range (2):
        for column in range (NBR_SQU):
            G.grid[column][line]=WHITE

    for line in range (6,8):
        for column in range (NBR_SQU):
            G.grid[column][line]=BLACK



    return G
    """game loaded with panel and piece (version 1, same piece then chess piece) """

def init_piece():
    P = Piece()
    print(P)

    return P
def end_game(G):
    """ end of the game if Mate"""

### III UTILITIES ###

def get_abs(clic):
    """return abs in grid"""

    CLICK_ABS = clic.x//LEN_CASE

    return CLICK_ABS

def get_ord(clic):
    """return ord in grid"""

    CLICK_ORD = clic.y//LEN_CASE
    return CLICK_ORD


def change_player(G,ABS,ORD):

    G.activePlayer=G.grid[G.selectedSquare[0]][G.selectedSquare[1]]
    """change active player"""


def ennemy():
    """optional: can't play if not your turn"""


### IV DROP PIECES ###

def drop_piece(G,ABS,ORD):
    """ drop a piece"""

    G.grid[ABS][ORD]=G.activePlayer

def select_piece(G,ABS,ORD):

   G.selectedSquare = (ABS,ORD)
   """select the piece you click on"""

def delete_piece(G):

    G.grid[G.selectedSquare[0]][G.selectedSquare[1]] = NONE

    G.selectedSquare = (None)

    """erase the piece that move"""

def valid_move():
    """see later if one or more"""

def valid_case():
    """if u can drop a piece on """

### VI DISPLAY ###

def display_panel():
    ''' Show the panel with 2 different colors for each case'''

    for ABS in range(0,NBR_SQU):

        for ORD in range(0,NBR_SQU):

            if ABS%2 == 0 and ORD%2 == 0 or ABS%2 != 0 and ORD%2 != 0:
            # If square abs and ord are even or if square abs and ord are odd

                affiche_rectangle_plein(Point(LEN_CASE*ABS,LEN_CASE*ORD),Point(LEN_CASE*(ABS+1),LEN_CASE*(ORD+1)),PANEL_COLOR1)

            else :
                affiche_rectangle_plein(Point(LEN_CASE*ABS,LEN_CASE*ORD),Point(LEN_CASE*(ABS+1),LEN_CASE*(ORD+1)),PANEL_COLOR2)

def colorPiece(G,ABS,ORD):
    if G.grid[ABS][ORD]==BLACK:
        color=noir
    elif G.grid[ABS][ORD]==WHITE:
        color=blanc
    return color


def display_piece():
    ''' Show a normal piece on the grid regardless of their type, while taking in count their color'''

    for ABS in range (0,NBR_SQU):
        for ORD in range (0,NBR_SQU):
            '''color = colorPiece(G,ABS,ORD)

            if P.type[ABS][ORD]== PAWN:
                display_pawn(ABS,ORD,color)
            elif P.type[ABS][ORD]== ROOK:
                display_rook(ABS,ORD,color)
            elif P.type[ABS][ORD]== BISHOP:
                display_bishop(ABS,ORD,noir)
            elif P.type[ABS][ORD]== king:
                display_king(ABS,ORD,noir)
            elif P.type[ABS][ORD]== KNIGHT:
                display_knight(ABS,ORD,noir)
            elif P.type[ABS][ORD]== QUEEN:
                display_quenne(ABS,ORD,noir)'''


def display_pawn(ABS,ORD,color):

    RAYON=LEN_CASE//6

    affiche_cercle_plein(Point(ABS*LEN_CASE +LEN_CASE//2, ORD*LEN_CASE +LEN_CASE//2+RAYON),RAYON-RAYON//3,color)
    affiche_cercle_plein(Point(ABS*LEN_CASE +LEN_CASE//2, ORD*LEN_CASE +LEN_CASE//2),RAYON,color)
    affiche_cercle_plein(Point(ABS*LEN_CASE +LEN_CASE//2, ORD*LEN_CASE +LEN_CASE//2-RAYON),RAYON+RAYON//3,color)

def display_rook(ABS,ORD,color):

    affiche_rectangle_plein(Point(ABS*LEN_CASE +LEN_CASE//10, ORD*LEN_CASE +LEN_CASE//10),Point(ABS*LEN_CASE +9*LEN_CASE//10, ORD*LEN_CASE +2*LEN_CASE//10),color)
    affiche_rectangle_plein(Point(ABS*LEN_CASE +3*LEN_CASE//10, ORD*LEN_CASE +2*LEN_CASE//10),Point(ABS*LEN_CASE +7*LEN_CASE//10, ORD*LEN_CASE +7*LEN_CASE//10),color)
    affiche_rectangle_plein(Point(ABS*LEN_CASE +LEN_CASE//9, ORD*LEN_CASE +7*LEN_CASE//10),Point(ABS*LEN_CASE +8*LEN_CASE//9, ORD*LEN_CASE +8*LEN_CASE//10),color)
    affiche_rectangle_plein(Point(ABS*LEN_CASE +LEN_CASE//9, ORD*LEN_CASE +8*LEN_CASE//10),Point(ABS*LEN_CASE +2*LEN_CASE//9, ORD*LEN_CASE +9*LEN_CASE//10),color)
    affiche_rectangle_plein(Point(ABS*LEN_CASE +3*LEN_CASE//9, ORD*LEN_CASE +8*LEN_CASE//10),Point(ABS*LEN_CASE +4*LEN_CASE//9, ORD*LEN_CASE +9*LEN_CASE//10),color)
    affiche_rectangle_plein(Point(ABS*LEN_CASE +5*LEN_CASE//9, ORD*LEN_CASE +8*LEN_CASE//10),Point(ABS*LEN_CASE +6*LEN_CASE//9, ORD*LEN_CASE +9*LEN_CASE//10),color)
    affiche_rectangle_plein(Point(ABS*LEN_CASE +7*LEN_CASE//9, ORD*LEN_CASE +8*LEN_CASE//10),Point(ABS*LEN_CASE +8*LEN_CASE//9, ORD*LEN_CASE +9*LEN_CASE//10),color)

def display_bishop(ABS,ORD,color):

    RAYON=LEN_CASE//4

    affiche_cercle_plein(Point(ABS*LEN_CASE +LEN_CASE//2, ORD*LEN_CASE +LEN_CASE//2+RAYON),RAYON//3,color)
    affiche_cercle_plein(Point(ABS*LEN_CASE +LEN_CASE//2, ORD*LEN_CASE +LEN_CASE//2),RAYON,color)
    affiche_rectangle_plein(Point(ABS*LEN_CASE +LEN_CASE//10, ORD*LEN_CASE +LEN_CASE//10),Point(ABS*LEN_CASE +9*LEN_CASE//10, ORD*LEN_CASE +3*LEN_CASE//10),color)

def display_king(ABS,ORD,color):

    RAYON=LEN_CASE//15

    affiche_rectangle_plein(Point(ABS*LEN_CASE +LEN_CASE//10, ORD*LEN_CASE +LEN_CASE//10),Point(ABS*LEN_CASE +9*LEN_CASE//10, ORD*LEN_CASE +3*LEN_CASE//10),color)
    affiche_triangle_plein(Point(ABS*LEN_CASE +3*LEN_CASE//10, ORD*LEN_CASE +4*LEN_CASE//10),Point(ABS*LEN_CASE +LEN_CASE//10, ORD*LEN_CASE +3*LEN_CASE//10),Point(ABS*LEN_CASE +2*LEN_CASE//10, ORD*LEN_CASE +8*LEN_CASE//10),color)
    affiche_triangle_plein(Point(ABS*LEN_CASE +3*LEN_CASE//10, ORD*LEN_CASE +4*LEN_CASE//10),Point(ABS*LEN_CASE +5*LEN_CASE//10, ORD*LEN_CASE +5*LEN_CASE//10),Point(ABS*LEN_CASE +4*LEN_CASE//10, ORD*LEN_CASE +8*LEN_CASE//10),color)
    affiche_triangle_plein(Point(ABS*LEN_CASE +7*LEN_CASE//10, ORD*LEN_CASE +4*LEN_CASE//10),Point(ABS*LEN_CASE +5*LEN_CASE//10, ORD*LEN_CASE +5*LEN_CASE//10),Point(ABS*LEN_CASE +6*LEN_CASE//10, ORD*LEN_CASE +8*LEN_CASE//10),color)
    affiche_triangle_plein(Point(ABS*LEN_CASE +7*LEN_CASE//10, ORD*LEN_CASE +4*LEN_CASE//10),Point(ABS*LEN_CASE +9*LEN_CASE//10, ORD*LEN_CASE +3*LEN_CASE//10),Point(ABS*LEN_CASE +8*LEN_CASE//10, ORD*LEN_CASE +8*LEN_CASE//10),color)
    affiche_triangle_plein(Point(ABS*LEN_CASE +LEN_CASE//10, ORD*LEN_CASE +3*LEN_CASE//10),Point(ABS*LEN_CASE +5*LEN_CASE//10, ORD*LEN_CASE +5*LEN_CASE//10),Point(ABS*LEN_CASE +9*LEN_CASE//10, ORD*LEN_CASE +3*LEN_CASE//10),color)
    affiche_cercle_plein(Point(ABS*LEN_CASE +2*LEN_CASE//10, ORD*LEN_CASE +8*LEN_CASE//10),RAYON,color)
    affiche_cercle_plein(Point(ABS*LEN_CASE +4*LEN_CASE//10, ORD*LEN_CASE +8*LEN_CASE//10),RAYON,color)
    affiche_cercle_plein(Point(ABS*LEN_CASE +6*LEN_CASE//10, ORD*LEN_CASE +8*LEN_CASE//10),RAYON,color)
    affiche_cercle_plein(Point(ABS*LEN_CASE +8*LEN_CASE//10, ORD*LEN_CASE +8*LEN_CASE//10),RAYON,color)


def display_queen(ABS,ORD,color):

    RAYON=LEN_CASE//4

    affiche_cercle_plein(Point(ABS*LEN_CASE +LEN_CASE//3, ORD*LEN_CASE +LEN_CASE//2),RAYON,color)
    affiche_cercle_plein(Point(ABS*LEN_CASE +2*LEN_CASE//3, ORD*LEN_CASE +LEN_CASE//2),RAYON,color)
    affiche_rectangle_plein(Point(ABS*LEN_CASE +LEN_CASE//5, ORD*LEN_CASE +LEN_CASE//10),Point(ABS*LEN_CASE +4*LEN_CASE//5, ORD*LEN_CASE +2*LEN_CASE//5),color)
    affiche_rectangle_plein(Point(ABS*LEN_CASE +3*LEN_CASE//7, ORD*LEN_CASE +LEN_CASE//2),Point(ABS*LEN_CASE +4*LEN_CASE//7, ORD*LEN_CASE +17*LEN_CASE//20),color)


def display_knight(ABS,ORD,color):
    if color == blanc:
        other=noir
    else:
        other=blanc

    affiche_rectangle_plein(Point(ABS*LEN_CASE +LEN_CASE//2, ORD*LEN_CASE +LEN_CASE//10),Point(ABS*LEN_CASE +9*LEN_CASE//10, ORD*LEN_CASE +LEN_CASE//2),color)
    affiche_rectangle_plein(Point(ABS*LEN_CASE +LEN_CASE//10, ORD*LEN_CASE +LEN_CASE//2),Point(ABS*LEN_CASE +9*LEN_CASE//10, ORD*LEN_CASE +7*LEN_CASE//10),color)
    affiche_rectangle_plein(Point(ABS*LEN_CASE +LEN_CASE//10, ORD*LEN_CASE +9*LEN_CASE//20),Point(ABS*LEN_CASE +3*LEN_CASE//10, ORD*LEN_CASE +LEN_CASE//2),color)
    affiche_triangle_plein(Point(ABS*LEN_CASE +3*LEN_CASE//10, ORD*LEN_CASE +LEN_CASE//2),Point(ABS*LEN_CASE +3*LEN_CASE//10, ORD*LEN_CASE +9*LEN_CASE//20),Point(ABS*LEN_CASE +LEN_CASE//2, ORD*LEN_CASE +LEN_CASE//2),color)
    affiche_triangle_plein(Point(ABS*LEN_CASE +6*LEN_CASE//10, ORD*LEN_CASE +7*LEN_CASE//10),Point(ABS*LEN_CASE +8*LEN_CASE//10, ORD*LEN_CASE + 7*LEN_CASE//10),Point(ABS*LEN_CASE +7*LEN_CASE//10, ORD*LEN_CASE +8*LEN_CASE//10),color)
    affiche_cercle_plein(Point(ABS*LEN_CASE +LEN_CASE//2, ORD*LEN_CASE +6*LEN_CASE//10),LEN_CASE//25,other)


def display_config_panel(G):
    ''' for mater, change color, timer, numer of piece..'''
    affiche_rectangle_plein(Point(LEN_GRID,0),Point(LEN_GRID+LEN_PANEL,LEN_GRID),CONFIG_COLOR3)


def display_piece_selection(G):
    if G.selectedSquare != (None):
        affiche_rectangle(Point(G.selectedSquare[0]*LEN_CASE,G.selectedSquare[1]*LEN_CASE),Point((G.selectedSquare[0]+1)*LEN_CASE,(G.selectedSquare[1]+1)*LEN_CASE),rouge,5)
    '''show which piece is selected'''



def display_game(J):
    """
    Affiche toutes les composantes du jeu
    """
    display_panel()
    display_config_panel(G)
    display_piece()
    display_piece_selection(G)
    affiche_tout()


### VII MAIN ###

init_fenetre(LEN_GRID+LEN_PANEL,LEN_GRID,"Chess Game")
affiche_auto_off()

P = init_piece()
G = init_game()
display_game(G)
clic = Point()

PAWN_W1 = (P.color[1], P.type[1])
PAWN_W2 = (P.color[1], P.type[1])
PAWN_W3 = (P.color[1], P.type[1])
PAWN_W4 = (P.color[1], P.type[1])
PAWN_W5 = (P.color[1], P.type[1])
PAWN_W6 = (P.color[1], P.type[1])
PAWN_W7 = (P.color[1], P.type[1])
PAWN_W8 = (P.color[1], P.type[1])
PAWN_B1 = (P.color[2], P.type[1])
PAWN_B2 = (P.color[2], P.type[1])
PAWN_B3 = (P.color[2], P.type[1])
PAWN_B4 = (P.color[2], P.type[1])
PAWN_B5 = (P.color[2], P.type[1])
PAWN_B6 = (P.color[2], P.type[1])
PAWN_B7 = (P.color[2], P.type[1])
PAWN_B8 = (P.color[2], P.type[1])

KNIGHT_W1 = (P.color[1], P.type[2])
KNIGHT_W2 = (P.color[1], P.type[2])
KNIGHT_B1 = (P.color[2], P.type[2])
KNIGHT_B2 = (P.color[2], P.type[2])

BISHOP_W1 = (P.color[1], P.type[3])
BISHOP_W2 = (P.color[1], P.type[3])
BISHOP_B1 = (P.color[2], P.type[3])
BISHOP_B2 = (P.color[2], P.type[3])

ROOK_W1 = (P.color[1], P.type[4])
ROOK_W2 = (P.color[1], P.type[4])
ROOK_B1 = (P.color[2], P.type[4])
ROOK_B2 = (P.color[2], P.type[4])

QUEEN_W = (P.color[1], P.type[5])
QUEEN_B = (P.color[2], P.type[5])

KING_W = (P.color[1], P.type[6])
KING_B = (P.color[2], P.type[6])

print(PAWN_W1)


while not(end_game(G)) and pas_echap():
    clic = wait_clic()
    if clic.x < LEN_GRID: # we r on the panel
        ABS = get_abs(clic)
        ORD = get_ord(clic)

        if G.grid[ABS][ORD] != NONE:
            select_piece(G,ABS,ORD) # select the piece
            change_player(G,ABS,ORD) # color of player become the one of the selected piece

        elif G.grid[ABS][ORD] == NONE and G.selectedSquare != (None) : #no piece and a piece selected before
            drop_piece(G,ABS,ORD)    # drop a piece on the case selcted (2nd clic)
            delete_piece (G)  # take off the piece (1st piece)
    # nothing if not on panel
    display_game(G)
attendre_echap()
